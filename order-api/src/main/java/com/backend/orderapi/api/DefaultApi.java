/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.backend.orderapi.api;

import com.backend.orderapi.model.Good;
import com.backend.orderapi.model.ModifyDeliveryDateReq;
import com.backend.orderapi.model.ModifyDeliveryStateReq;
import com.backend.orderapi.model.Order;
import com.backend.orderapi.model.OrderItem;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-25T15:42:07.320676200+01:00[Europe/Budapest]", comments = "Generator version: 7.10.0")
@Validated
@Controller
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * GET /api/order/good/{goodId}
     * get good by id
     *
     * @param goodId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getGoodById",
        description = "get good by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Good.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/order/good/{goodId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Good> getGoodById(
        @Parameter(name = "goodId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("goodId") Integer goodId
    );


    /**
     * GET /api/order/{orderId}
     * get order by id
     *
     * @param orderId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrderById",
        description = "get order by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/order/{orderId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Order> getOrderById(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Integer orderId
    );


    /**
     * GET /api/order/order-item/{orderItemId}
     * get order item by id
     *
     * @param orderItemId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrderItemById",
        description = "get order item by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderItem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/order/order-item/{orderItemId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<OrderItem> getOrderItemById(
        @Parameter(name = "orderItemId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderItemId") Integer orderItemId
    );


    /**
     * GET /api/order/customer/{userId}
     * get orders ordered by a customer
     *
     * @param userId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByCustomer",
        description = "get orders ordered by a customer",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/order/customer/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Order>> getOrdersByCustomer(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId
    );


    /**
     * GET /api/order/driver/{userId}
     * get orders delivered by a driver
     *
     * @param userId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByDriver",
        description = "get orders delivered by a driver",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/order/driver/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Order>> getOrdersByDriver(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId
    );


    /**
     * GET /api/order/handler/{userId}
     * get orders handled by a handler
     *
     * @param userId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByHandler",
        description = "get orders handled by a handler",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/order/handler/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Order>> getOrdersByHandler(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId
    );


    /**
     * PUT /api/order/driver
     * updates the delivery state of the order
     *
     * @param modifyDeliveryStateReq  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateDeliveryState",
        description = "updates the delivery state of the order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/order/driver",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateDeliveryState(
        @Parameter(name = "ModifyDeliveryStateReq", description = "") @Valid @RequestBody(required = false) ModifyDeliveryStateReq modifyDeliveryStateReq
    );


    /**
     * PUT /api/order/handler
     * updates the expected delivery time of the order
     *
     * @param modifyDeliveryDateReq  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateDeliveryTime",
        description = "updates the expected delivery time of the order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/order/handler",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateDeliveryTime(
        @Parameter(name = "ModifyDeliveryDateReq", description = "") @Valid @RequestBody(required = false) ModifyDeliveryDateReq modifyDeliveryDateReq
    );

}
